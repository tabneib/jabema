/* Generated By:JavaCC: Do not edit this line. PointcutParser.java */
package net.cliseau.composer.javatarget.PointcutParser;

import net.cliseau.composer.javatarget.PointcutParser.Pointcut;
import net.cliseau.composer.javatarget.PointcutParser.PointcutSpec;

/**
 * Parser for pointcut declarations.
 *
 * Created with the javacc compiler generator, this is a class for parsing
 * pointcut declarations. Essentially, the pointcut language follows the AspectJ
 * grammar for pointcuts. The grammar essentially expects lists of pointcuts and
 * import declarations. Particularly, in contrast to AspectJ, no advice and
 * other configurations of aspects, or the aspect declaration itself are
 * expected by the parser.
 *
 * The parser effectively ignores the pointcut expressions: it does not verify
 * that the pointcut expressions are valid according to the AspectJ language. On
 * the other hand, at some places our grammar is more restrictive than the
 * AspectJ one, for example in that abstract pointcuts are not allowed here.
 *
 * @see PointcutSpec
 * @see net.cliseau.composer.javatarget.AspectWeaver
 */
public class PointcutParser implements PointcutParserConstants {

/*==============================================================================
 *  TYPE PATTERNS
 *==============================================================================
 */

/**
 * Parse a fully qualified (type) name.
 *
 * A fully qualified name is the nonterminal for Java type names, which may
 * contain the dotted package path and the actual type name.
 *
 * <pre>   FullyQualifiedName ::= Identifier ('.'+ Identifier)*</pre>
 *
 * @return The parsed name as a string.
 * @todo The current implementation allows spaces to occur within a fully
 *       qualified name. If this is not OK, this function must be fixed.
 * @todo The current implementation does not match the documented grammar as it
 *       does not permit successive dots!
 */
  final public String FullyQualifiedName() throws ParseException {
        Token t;
        String s;
    t = jj_consume_token(Identifier);
          s = t.image;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(DOT);
      t = jj_consume_token(Identifier);
                                s = s + "." + t.image;
    }
          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/*==============================================================================
 *  JAVA EXPRESSIONS (or: correctly parenthesized expressions)
 *==============================================================================
 */

/**
 * Parse an approximation of a Java expression without parentheses.
 *
 * This parses a sequence of tokens which are strings or non-parenthesis
 * characters outside of a string.
 *
 * <pre>
 *   JavaExpressionNoPar := [^()"]* ( String [^()"]* )*
 * </pre>
 *
 * @return The parsed data as a string
 */
  final public String JavaExpressionNoPar() throws ParseException {
        StringBuffer sb = new StringBuffer();
        Token t;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOTSTRINGNOTPAR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      t = jj_consume_token(NOTSTRINGNOTPAR);
                                 sb.append(t.image);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      t = jj_consume_token(STRING);
                                      sb.append(t.image);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTSTRINGNOTPAR:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_4;
        }
        t = jj_consume_token(NOTSTRINGNOTPAR);
                                      sb.append(t.image);
      }
    }
          {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an approximation of a Java expression.
 *
 * This is a very coarse approximation of Java expressions which only demands
 * that the expression is correctly parenthesized and may contain strings (in
 * which parentheses are not considered special). For parsing pointcuts this
 * should suffice and precisely parsing the Java grammar would be overkill.
 *
 * We move the actual parsing out to JavaExpressionInt() and here only switch
 * the token scanner to the IN_JAVA_EXPR state in which tokens are generated
 * differently from the normal mode. In principle, such switches are quite
 * fragile if the token scanner already has items in its lookahead buffer.
 * There are some larger code portions in the Internet for how to resolve this
 * issue in a safe way. Since the grammars here are not very complicated,
 * however, a bit of guesswork helped as well to get the parsing work.
 *
 * <pre>
 *   JavaExpression ::= JavaExpressionNoPar ( '(' JavaExpression ')' JavaExpressionNoPar )*
 * </pre>
 *
 * @return The parsed data as a string
 */
  final public String JavaExpression() throws ParseException {
        int lex_state;
        String s;
          lex_state = token_source.curLexState; token_source.SwitchTo(IN_JAVA_EXPR);
    s = JavaExpressionInt();
          token_source.SwitchTo(lex_state);
          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an approximation of a Java expressing, assuming tokenizer state IN_JAVA_EXPR.
 *
 * This parses the actual JavaExpression().
 *
 * @return The parsed data as a string
 * @see #JavaExpression()
 */
  final public String JavaExpressionInt() throws ParseException {
        StringBuffer sb = new StringBuffer();
        String s;
        Token t;
    s = JavaExpressionNoPar();
                                      sb.append(s);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XLPARENTHESIS:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_5;
      }
      t = jj_consume_token(XLPARENTHESIS);
                                           sb.append(t.image);
      s = JavaExpressionInt();
                                           sb.append(s);
      t = jj_consume_token(XRPARENTHESIS);
                                           sb.append(t.image);
      s = JavaExpressionNoPar();
                                           sb.append(s);
    }
          {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

/*==============================================================================
 *  IMPORT
 *==============================================================================
 */

/**
 * Parse an import declaration.
 *
 * An import declaration has the same grammar as regular Java import
 * declarations.
 * <pre>   Import ::= 'import' FullyQualifiedName</pre>
 */
  final public String Import() throws ParseException {
                    String s;
    jj_consume_token(IMPORT);
    s = FullyQualifiedName();
          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

/*==============================================================================
 *  POINTCUTS
 *==============================================================================
 */

/**
 * Parse a parameter list.
 *
 * A parameter list is a comma-separated list of pairs of parameter type and
 * parameter name.
 *
 * <pre>   ParamList ::= FullyQualifiedName Identifier (',' ParamList)*</pre>
 *
 * @param pc Pointcut object to which the parameters are added
 */
  final public void ParamList(Pointcut pc) throws ParseException {
        Token t;
        String ptype;
    ptype = FullyQualifiedName();
    t = jj_consume_token(Identifier);
          pc.addParameter(ptype,t.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      ParamList(pc);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

/**
 * Parse a list of pointcut modifiers.
 *
 * In contrast to the AspectJ grammar, we disallow "abstract" pointcuts here,
 * since these do not comprise a pointcut expression.
 * <pre>
 *   PointcutModifiers ::= PointcutModifier*
 *   PointcutModifier  ::= 'public' | 'private' | 'protected'
 * </pre>
 */
  final public void PointcutModifiers() throws ParseException {
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case PRIVATE:
      case PROTECTED:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**
 * Parse a primitive pointcut expression.
 *
 * Here we really abbreviate from the original grammar, as we are not
 * interested in the concrete conditions for the pointcut to hold, but
 * rather only in the parameters of the pointcut which are given not in
 * the PointcutPrimitive but in the ParamList of the PointcutDeclaration.
 *
 * The original AspectJ grammar below distinguishes the different possibilities
 * for conditions on pointcuts:
 * <pre>
 *   PointcutPrimitive ::= Call | Execution | Get | Set | Handler
 *                       | Initialization | PreInitialization
 *                       | StaticInitialization | AdviceExecution
 *                       | This | Target | Args | CFlow | CFlowBelow
 *                       | Within | WithinCode | If | AnnotationPointcut
 * </pre>
 * We simplify the grammar as follows, since every pointcut condition starts
 * with a word identifying its type and the conditions' details are Java
 * expressions.
 * <pre>
 *   PointcutPrimitive ::= Identifier '(' JavaExpression ')'
 * </pre>
 *
 * @return The string of the pointcut primitive.
 */
  final public String PointcutPrimitive() throws ParseException {
        StringBuffer sb = new StringBuffer();
        String s;
        Token t;
    t = jj_consume_token(Identifier);
                              sb.append(t.image);
    /* NOTE: due to the token scanner's lookahead buffer, we here use
    	 * XRPARENTHESIS for the closing parenthesis token, even though the scanner
    	 * has already been switched to the "normal" parsing mode at that point.
    	 * This is quite fragile and it's not clear, whether this works in all cases.
    	 * However, in all tested ones, it worked so far. */
            t = jj_consume_token(LPARENTHESIS);
                             sb.append(t.image);
    s = JavaExpression();
                              sb.append(s);
    t = jj_consume_token(XRPARENTHESIS);
                              sb.append(t.image);
          {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a pointcut expression.
 *
 * This function parses pointcut expressions, which are Boolean combinations of
 * PointcutPrimitive()s. It returns the whole expression as a string because we
 * are not interested in the content of the pointcut expression. We only parse
 * them in order to correctly identify the end of the pointcut declaration.
 *
 * In contrast to the original grammar for pointcut expressions (as shown
 * below), we here do not allow reference pointcuts.
 *
 * <pre>
 *   PointcutExpression ::= PointcutPrimitive
 *                        | '!' PointcutExpression
 *                        | '(' PointcutExpression ')'
 *                        | PointcutExpression '&&' PointcutExpression
 *                        | PointcutExpression '||' PointcutExpression
 * </pre>
 *
 * @return The string of the full pointcut expression.
 */
  final public String PointcutExpression() throws ParseException {
        StringBuffer sb = new StringBuffer();
        String s;
        Token t;
    s = PointcutTerm();
                                sb.append(s);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANDAND:
      case OROR:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANDAND:
        t = jj_consume_token(ANDAND);
        break;
      case OROR:
        t = jj_consume_token(OROR);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                          sb.append(" " + t.image + " ");
      s = PointcutTerm();
                                    sb.append(s);
    }
          {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a pointcut term.
 *
 * This is a helper for PointcutExpression.
 * TODO: better documentation
 *
 * @return The string of the pointcut term.
 */
  final public String PointcutTerm() throws ParseException {
        StringBuffer sb = new StringBuffer();
        String s;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Identifier:
      s = PointcutPrimitive();
                                             sb.append(s);
      break;
    case LPARENTHESIS:
      t = jj_consume_token(LPARENTHESIS);
                                                  sb.append(t.image);
      s = PointcutExpression();
                                                  sb.append(s);
      t = jj_consume_token(RPARENTHESIS);
                                                  sb.append(t.image);
      break;
    case EXCMARK:
      t = jj_consume_token(EXCMARK);
                                                  sb.append(t.image);
      s = PointcutTerm();
                                                  sb.append(s);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a single pointcut declaration.
 *
 * A pointcut declaration essentially determines
 *  - a name (Identifier),
 *  - the parameter list,
 *  - the return type (this differs from the AspectJ grammar), and
 *  - the pointcut expression.
 *
 * The definition of the "Formals" nonterminal differs from the original AspectJ
 * language in that we add an optional possibility for giving a
 * FullyQualifiedName() for the return type of the pointcut.
 *
 * <pre>
 *   PointcutDeclaration ::= PointcutModifiers 'pointcut' Identifier Formals ':' PointcutExpression
 *   Formals             ::= '(' ParamList? ('>' FullyQualifiedName )? ')'
 * </pre>
 *
 * @return A Pointcut object corresponding to the parsed pointcut declaration.
 */
  final public Pointcut PointcutDeclaration() throws ParseException {
        Token t;
        String s;
        Pointcut pc = new Pointcut();
    PointcutModifiers();
    jj_consume_token(POINTCUT);
    t = jj_consume_token(Identifier);
                                    pc.setName(t.image);
    jj_consume_token(LPARENTHESIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Identifier:
      ParamList(pc);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GREATER:
      jj_consume_token(GREATER);
      s = FullyQualifiedName();
                                         pc.setReturnType(s);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(RPARENTHESIS);
    jj_consume_token(COLON);
    s = PointcutExpression();
                                    pc.setPointcutExpression(s);
          {if (true) return pc;}
    throw new Error("Missing return statement in function");
  }

/**
 * Parse a pointcut specification.
 *
 * A pointcut specification is a list of semicolon-separated
 * PointcutDeclaration() and Import() declarations, as specified by the
 * following grammar:
 * <pre>   PointcutSpec ::= ((PointcutDeclaration | Import) ';')*</pre>
 *
 * @return A pointcut specification object representing the parsed data.
 */
  final public PointcutSpec PointcutSpecification() throws ParseException {
        PointcutSpec pspec = new PointcutSpec();
        Pointcut pc;
        String imp;
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
      case POINTCUT:
      case PUBLIC:
      case PRIVATE:
      case PROTECTED:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POINTCUT:
      case PUBLIC:
      case PRIVATE:
      case PROTECTED:
        pc = PointcutDeclaration();
                  pspec.addPointcut(pc);
        jj_consume_token(SEMICOLON);
        break;
      case IMPORT:
        imp = Import();
                  pspec.addImport(imp);
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return pspec;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public PointcutParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400,0x0,0x0,0x0,0x0,0x800,0x70000000,0x70000000,0x3000000,0x3000000,0xc000,0x0,0x80000,0x7c000000,0x7c000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x2,0x4,0x2,0x8,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public PointcutParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PointcutParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PointcutParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PointcutParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PointcutParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PointcutParser(PointcutParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PointcutParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
