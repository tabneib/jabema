/* Copyright (c) 2011-2014 Richard Gay <gay@mais.informatik.tu-darmstadt.de>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package net.cliseau.composer.javatarget;

import java.util.Collection;
import org.antlr.stringtemplate.StringTemplate;
import net.cliseau.composer.PlainInetAddress;
import net.cliseau.composer.javacor.UnitStartupCreatorJavaCor;
import net.cliseau.composer.javatarget.AspectWeaver;
import net.cliseau.composer.config.base.InvalidConfigurationException;
import net.cliseau.composer.config.target.JavaCorConfig;
import net.cliseau.composer.config.target.AspectJConfig;

/**
 * Class for generating full sequentially inlined (FSI) Service Automata aspects
 * from pointcut definitions.
 *
 * An AspectGeneratorFSI object generates AOP aspects from a pointcut definition
 * and two templates for aspects and advices. For working with the templates are
 * stored in files and processed with the help of the StringTemplate library.
 *
 * The aspects generated by this class represent the Interceptor and Enforcer
 * components in the conceptual model of Service Automata.
 */
public class AspectWeaverFSI extends AspectWeaver {
	/** Identifier of the unit (this might be used by the policy for self-identification. */
	final String identifier;
	/** Name of the LocalPolicy class to be used for making decisions. */
	final String localPolicyClassName;

	/**
	 * Construct AspectGeneratorFSI object.
	 *
	 * @param destinationDirectory The directory into which the modified target is to be written.
	 * @param aspectjConfig The configuration of the target.
	 * @param corConfig The configuration of the Java coordinator.
	 * @param coordinatorAddress Address under which the interceptor part of the aspect can contact the local coordinator.
	 * @param enforcerAddress Address under which the enforcer part of the aspect is supposed to listen to decisions from the local coordinator.
	 * @param inlinedDependencies Collection of dependencies that are introduced by the woven aspect (relative to the target program path).
	 * @param aspectTemplateFile File name for aspect template (without path and the "st" extension)
	 * @param adviceTemplateFile File name for advice template (without path and the "st" extension)
	 * @param measureAdviceTime Enable/disable measurements inside the advice.
	 * @param verbose Enable/disable verbose information.
	 */
	public AspectWeaverFSI(
			final String destinationDirectory,
			final AspectJConfig aspectjConfig,
			final JavaCorConfig corConfig,
			final PlainInetAddress coordinatorAddress,
			final PlainInetAddress enforcerAddress,
			final Collection<String> inlinedDependencies,
			final String aspectTemplateFile,
			final String adviceTemplateFile,
			final boolean measureAdviceTime,
			final boolean verbose) throws InvalidConfigurationException {
		super(destinationDirectory, aspectjConfig,
			coordinatorAddress, enforcerAddress,
			inlinedDependencies, /*TODO: aspectTemplateFile, adviceTemplateFile, */
			measureAdviceTime, verbose);
		this.identifier = corConfig.getUnitName();
		this.localPolicyClassName = corConfig.getLocalPolicyName();

		//TODO: somewhere call the UnitStartupCreatorJavaCor.createPolicyConfigurationFile()
		//      and put the result into the instrumented archive. This could be by overriding
		//      the updateTargetManifest method of AspectWeaver, for instance.
	}

	/**
	 * Set aspect properties beyond the advice, imports and aspect name.
	 */
	@Override protected void setAspectProperties(StringTemplate aspect) {
		super.setAspectProperties(aspect);
		aspect.setAttribute("LocalPolicyClass", localPolicyClassName);
		aspect.setAttribute("Identifier", identifier);
		aspect.setAttribute("PolicyConfigRes", UnitStartupCreatorJavaCor.policyParamsFileName);
	}
}
