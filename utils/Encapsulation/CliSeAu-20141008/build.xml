<!--
Copyright (c) 2011-2013 Richard Gay <gay@mais.informatik.tu-darmstadt.de>

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
-->
<project name="CliSeAu" default="all">
	<!-- Directories -->
	<property name="src"      value="src" />
	<property name="test.src" value="src" />
	<property name="bin"      value="bin" />
	<property name="build"    value="build" />
	<property name="data"     value="data" />
	<property name="config"   value="config" />
	<property name="javacc.src" value="${src}/net/cliseau/composer/javatarget/PointcutParser/" />
	<!-- the following file must contain paths to libraries etc.
		  which may vary from system to system -->
	<property file="${config}/paths.cfg" />

	<path id="classpath">
		<fileset dir="libs" includes="**/*.jar"/>
		<pathelement location="${libs.log4j}" />
		<pathelement location="${libs.junit}" />
		<pathelement location="${libs.jansi}" />
		<pathelement location="${libs.hamcrest}" /> <!-- for junit -->
		<pathelement location="${libs.strtmpl}" />
		<pathelement location="${libs.antlr}" /> <!-- for stringtemplate -->
		<pathelement location="${libs.commonsio}" />
		<pathelement location="${libs.commonslang}" />
	</path>

	<target name="jvm.check">
		<condition property="jvm.ok">
			<not>
				<or>
					<equals arg1="${ant.java.version}" arg2="1.0"/>
					<equals arg1="${ant.java.version}" arg2="1.1"/>
					<equals arg1="${ant.java.version}" arg2="1.2"/>
					<equals arg1="${ant.java.version}" arg2="1.3"/>
					<equals arg1="${ant.java.version}" arg2="1.4"/>
					<equals arg1="${ant.java.version}" arg2="1.5"/>
				</or>
			</not>
		</condition>
		<fail unless="jvm.ok" message="Found JVM version ${ant.java.version} - 1.6+ required"/>
		<echo message="Found JVM version ${ant.java.version} - OK" />
	</target>

	<target name="javacc">
		<javacc
			target="${javacc.src}/PointcutParser.jj"
			outputdirectory="${javacc.src}"
			javacchome="${path.javacc}"
		/>
	</target>

	<target name="javacc.clean">
		<delete>
			<fileset dir="${javacc.src}" includes="PointcutParser*.java,ParseException.java,SimpleCharStream.java,Token*.java"/>
		</delete>
	</target>

	<target name="build" depends="jvm.check,javacc">
		<mkdir dir="${bin}" />
		<javac
			srcdir="${src}"
			destdir="${bin}"
			includes="net/cliseau/**"
			classpathref="classpath"
			includeantruntime="false"
			deprecation="true"
			source="1.6"
			>
			<!--debug="true" debuglevel="lines,vars,source"-->
			<compilerarg value="-Xlint:unchecked" />
		</javac>
	</target>

	<target name="runtime" depends="build">
		<mkdir dir="${build}" />
		<jar
			destfile="${build}/CliSeAuRT.jar"
			basedir="${bin}"
			includes="net/cliseau/runtime/**,net/cliseau/utils/**"
		/>
	</target>

	<target name="libraries" depends="build">
		<mkdir dir="${build}" />
		<jar
			destfile="${build}/std-enforcers.jar"
			basedir="${bin}"
			includes="net/cliseau/lib/enforcer/**"
		/>
		<jar
			destfile="${build}/ChineseWall.jar"
			basedir="${bin}"
			includes="net/cliseau/lib/policy/ChineseWall*,net/cliseau/lib/policy/PartitionablePolicy*"
		/>
		<jar
			destfile="${build}/FrequencyQuota.jar"
			basedir="${bin}"
			includes="net/cliseau/lib/policy/FrequencyQuota*,net/cliseau/lib/policy/PartitionablePolicy*"
		/>
		<jar
			destfile="${build}/VolumeQuota.jar"
			basedir="${bin}"
			includes="net/cliseau/lib/policy/VolumeQuota*,net/cliseau/lib/policy/PartitionablePolicy*"
		/>
		<!--TODO: later add here other library JARs (e.g., for the policies)-->
	</target>

	<target name="clean" depends="javacc.clean" >
		<delete dir="${bin}" />
		<delete quiet="true" >
			<fileset dir="${build}" includes="*.jar"/>
		</delete>
	</target>

	<target name="rebuild" depends="clean,build" />
	<target name="SA" depends="build,runtime" />

	<!-- Testing -->
	<target name="test" depends="build">
		<junit fork="yes" haltonfailure="yes" printsummary="yes">
			<formatter type="plain" usefile="false" />
			<classpath>
				<path refid="classpath" />
				<path location="${bin}" />
			</classpath>
			<batchtest fork="yes">
				<fileset dir="${test.src}" includes="test/cliseau/junit/**/*.java"/>
			</batchtest>
		</junit>
	</target>

	<!-- Code Documentation -->
	<property name="doxyfile"    value="Doxyfile" />
	<property name="javadoc.dir" value="doc/javadoc" />
	<property name="doxygen.dir" value="doc/doxygen" /> <!-- specified in ${doxyfile} -->

	<target name="doxygen" depends="javacc" >
		<exec executable="doxygen">
			<arg value="${doxyfile}" />
			</exec>
	</target>

	<target name="doc" depends="javacc" >
		<javadoc packagenames="*"
				excludepackagenames=""
				defaultexcludes="yes"
				destdir="doc/javadoc"
				private="true"
				author="false"
				version="false"
				use="true"
				windowtitle="Service Automata">
			<sourcepath>
				<pathelement path="${src}"/>
			</sourcepath>
			<classpath>
				<path refid="classpath"/>
			</classpath>
			<doctitle><![CDATA[<h1>Service Automata</h1>]]></doctitle>
			<!--<bottom><![CDATA[<i>Copyright &#169; 2000 Dummy Corp. All Rights Reserved.</i>]]></bottom>-->
			<tag name="todo" scope="all" description="To do:"/>
			<tag name="intnote" scope="all" enabled="false" description="Internal note:" />
			<group title="Main Code" packages="net.*"/>
			<group title="Tests" packages="test.*"/>
		</javadoc>
	</target>

	<target name="doc.clean" >
		<delete dir="${javadoc.dir}" />
		<delete dir="${doxygen.dir}" />
	</target>

	<!-- Example Instances: common stuff -->
	<path id="encapsclasspath">
		<pathelement location="${libs.log4j}" />
		<pathelement location="${libs.strtmpl}" />
		<pathelement location="${libs.antlr}" />
		<pathelement location="${libs.commonslang}" />
		<pathelement location="${libs.commonsio}" />
	</path>

	<!-- set classpaths; this depends on whether we use absolute paths
		  (e.g., system library paths) or relative paths (e.g., libraries
		  come packaged within a subdirectory) -->
	<condition property="absolute-lib-paths">
		<matches pattern="^/.*" string="${libs.log4j}"/> <!-- absolute or relative lib paths? -->
	</condition>
	<target name="setpaths.absolute" if="absolute-lib-paths">
		<property name="pathprefix" value="" />
		<!-- the following string should list all path elements of "encapsclasspath" -->
		<property name="encapscpstring" value="${libs.log4j} ${libs.strtmpl} ${libs.antlr} ${libs.commonslang} ${libs.commonsio}" />
	</target>
	<target name="setpaths.relative" unless="absolute-lib-paths">
		<property name="pathprefix" value="../../" /> <!-- 2 directory levels to get from "tests/*/" to the base directory -->
		<manifestclasspath property="encapscpstring" jarfile="tests/encaps.jar">
			<classpath refid="encapsclasspath" />
		</manifestclasspath>
	</target>
	<target name="setpaths" depends="setpaths.absolute,setpaths.relative" />

	<target name="deps.config" depends="setpaths" >
		<!-- Create a file with dependency configuration settings (system properties) -->
		<mkdir dir="${data}/encaps" />
		<propertyfile file="${data}/encaps/paths.cfg" comment="Encapsulation tool properties">
			<entry key="log4j"    value="${pathprefix}${libs.log4j}"/>
			<entry key="jansi"    value="${pathprefix}${libs.jansi}"/>
			<entry key="encapscp" value="${encapscpstring}"/>
		</propertyfile>
	</target>

	<!-- encapsulation tool -->
	<property name="composer.cfgfile" value="config/composer.cfg" /> <!-- excluding "data/" prefix! -->
	<target name="composer.config" >
		<!-- Create a file with dependency configuration settings (system properties) -->
		<mkdir dir="${data}/config" />
		<propertyfile file="${data}/${composer.cfgfile}" comment="Encapsulation tool configuration">
			<entry key="cliseau.runtime"    value="${build}/CliSeAuRT.jar" /> <!-- relative to base directory. -->
			<entry key="aspectj.compiler"   value="${aspectj.compiler}" />
			<entry key="aspectj.runtime"    value="${aspectj.runtime}" />
			<entry key="java.jar"           value="${java.jar}" />
			<entry key="libs.log4j"         value="${libs.log4j}"/>
			<entry key="libs.jansi"         value="${libs.jansi}"/>
			<!-- here follows our own standard stuff -->
			<entry key="libs.std-enforcers" value="${build}/std-enforcers.jar"/>
		</propertyfile>
	</target>
	<target name="updateconfig" depends="setpaths,composer.config" >
		<jar update="yes" destfile="${build}/encaps.jar">
			<fileset dir="${data}" includes="${composer.cfgfile}" />
			<manifest>
				<attribute name="Main-Class" value="net.cliseau.composer.Encapsulate" />
				<attribute name="Class-Path" value="${encapscpstring}" />
			</manifest>
		</jar>
	</target>
	<target name="encaps" depends="composer.config,setpaths" >
		<jar destfile="${build}/encaps.jar" >
			<fileset dir="${bin}"  includes="net/cliseau/composer/**" />
			<fileset dir="${bin}"  includes="net/cliseau/utils/**" />
			<fileset dir="${data}" includes="templates/*.st" />
			<fileset dir="${data}" includes="config/*.cfg" />
			<manifest>
				<attribute name="Main-Class" value="net.cliseau.composer.Encapsulate" />
				<attribute name="Class-Path" value="${encapscpstring}" />
			</manifest>
		</jar>
	</target>

	<!-- Everything together -->
	<target name="all" depends="SA,encaps,libraries,deps.config">
	</target>

	<target name="cleanall" depends="clean">
		<echo message="Cleaning test instances directories ..." />
		<ant dir="tests/instances"          antfile="build.xml" target="clean" inheritall="false" />
	</target>

	<!-- Distribution -->
	<tstamp/>
	<property name="dist.dir"  value="CliSeAu-${DSTAMP}" />
	<property name="dist.tar" value="${dist.dir}.tar" />
	<property name="dist.targz" value="${dist.dir}.tar.gz" />
	<target name="distribution" depends="cleanall">
		<!-- Create adapted paths config, to get from absolute to relative library paths -->
		<copy file="${config}/paths.cfg" tofile="${config}/paths.cfg.tmp" />
		<replaceregexp file="${config}/paths.cfg.tmp"
			match='(=[ ]*)/usr/share/[^"]*/([^"/]*)$'
			replace='\1libs/\2'
			byline="true"
			/>
		<!-- Create the archive -->
		<tar longfile="gnu" destfile="${dist.tar}">
			<!-- Source code -->
			<tarfileset prefix="${dist.dir}/${src}" dir="${src}" includes="**/*" />
			<!-- Documentation -->
			<!-- TODO: add javadoc/doxygen results? -->
			<!-- Tests applications -->
			<tarfileset prefix="${dist.dir}/tests" dir="tests/" >
				<include name="*.cfg" />
				<include name="instances/build.xml" />
				<include name="instances/src/**/*.java" />
				<include name="instances/pointcuts/**/*.pc" />
				<!-- no DRS in here anymore!
				<include name="DRS/build.xml" />
				<include name="DRS/*.sh" />
				<include name="DRS/demo/*" />
				<include name="DRS/inst/**/*" />
				<include name="DRS/test/build.xml" />
				<include name="DRS/test/src/*.java" />
				<include name="DRS/test/aspectj/*" />
				<include name="DRS/impl/*" />
				<include name="DRS/impl/src/**/*" />
				<include name="DRS/impl/scripts/**/*" />
				<include name="DRS/impl/doc/**/*" />
				-->
				<include name="targets/SimpleFTPD/*.sh" />
				<include name="targets/SimpleFTPD/README" />
				<include name="targets/SimpleFTPD/data/ftp.properties" />
				<include name="targets/SimpleFTPD/data/mkprops.sh" />
				<include name="targets/SimpleFTPD/inst/**/*" />
				<include name="targets/SimpleFTPD/patches/**/*" />
				<include name="targets/SimpleFTPD/test/evaluate.sh" />
				<include name="targets/SimpleFTPD/test/ftpcli/build.xml" />
				<include name="targets/SimpleFTPD/test/ftpcli/ftpcli.java" />
				<include name="targets/AnomicFTPD/*.sh" />
				<include name="targets/AnomicFTPD/README" />
				<include name="targets/AnomicFTPD/data/ftpd.*" />
				<include name="targets/AnomicFTPD/data/mkprops.sh" />
				<include name="targets/AnomicFTPD/inst/**/*" />
				<include name="targets/AnomicFTPD/patches/**/*" />
				<include name="targets/AnomicFTPD/test/evaluate.sh" />
			</tarfileset>
			<!-- Data files -->
			<tarfileset prefix="${dist.dir}/${data}" dir="${data}" includes="templates/**/*" />
			<tarfileset prefix="${dist.dir}/${data}" dir="${data}" includes="config/defaults.cfg" />
			<!-- Third-party libraries -->
			<tarfileset file="${libs.junit}" prefix="${dist.dir}/libs" />
			<tarfileset file="${libs.hamcrest}" prefix="${dist.dir}/libs" />
			<tarfileset dir="${path.javacc}" includes="*.jar" prefix="${dist.dir}/libs" />
			<tarfileset file="${libs.log4j}" prefix="${dist.dir}/libs" />
			<tarfileset file="${libs.commonsio}" prefix="${dist.dir}/libs" />
			<tarfileset file="${libs.commonslang}" prefix="${dist.dir}/libs" />
			<tarfileset file="${libs.strtmpl}" prefix="${dist.dir}/libs" />
			<tarfileset file="${libs.antlr}" prefix="${dist.dir}/libs" />
			<tarfileset file="${libs.jansi}" prefix="${dist.dir}/libs" />
			<!-- Single files -->
			<tarfileset prefix="${dist.dir}" dir="./" >
				<include name="README" />
				<include name="${doxyfile}" />
			</tarfileset>
			<tarfileset fullpath="${dist.dir}/build.xml" file="build.xml" />
			<tarfileset fullpath="${dist.dir}/${config}/paths.cfg" file="${config}/paths.cfg.tmp" />
			<tarfileset fullpath="${dist.dir}/LICENSE.txt" file="LICENSE.txt" />
		</tar>
		<gzip destfile="${dist.targz}" src="${dist.tar}"/>
		<!-- Cleanup -->
		<delete file="${config}/paths.cfg.tmp" />
		<delete file="${dist.tar}" />
	</target>
</project>
